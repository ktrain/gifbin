/** @jsx React.DOM */
var React = require('react');
var _ = require('underscore');
var $ = require('jquery');
var cx = require('classnames');
var ClipboardButton = require('gifbin/clipboardButton/clipboardButton.jsx');

var Link = require('gifbin/link.jsx');

var GifCard = React.createClass({
	getDefaultProps: function() {
		return {
			gif : {
				link: "http://i.imgur.com/PyPM10X.gif",
				user: "Kellen",
				tags: "computer,kid,thumbs up,90s",
				views: 0,
				buckets: ["groos"],
				favouritedBy: [ ],
				created: "2014-01-31T17:05:13.486Z",
				webmLink: "http://i.imgur.com/PyPM10X.webm",
				gifvLink: "http://i.imgur.com/PyPM10X.gifv",
				imgLink: "http://i.imgur.com/PyPM10Xs.jpg",
				id: "5582f4a8161b6db41f000001"
			}
		};
	},

	getInitialState: function() {
		return {
			hovered: false
		};
	},

	hover : function(){
		clearTimeout(this.timeout);
		if(this.state.hovered) return;

		if(!this.state.webmLoaded){
			this.refs.gifvSource.getDOMNode().setAttribute('src', this.props.gif.webmLink);
			this.refs.gifv.getDOMNode().load()
		}

		this.setState({
			hovered : true
		});
	},

	unhover : function(){
		var self = this;
		this.timeout = setTimeout(function(){
			self.setState({
				hovered : false
			})
			if(self.refs){
				$(self.refs.hitbox.getDOMNode()).find('.clipboardButton').removeClass('zeroclipboard-is-hover');
			}
		}, 50)
	},

	componentDidMount: function() {
		var self = this;
		this.refs.gifv.getDOMNode().oncanplay = function(){

			self.setState({
				webmLoaded : true
			});

			self.refs.gifv.getDOMNode().oncanplay = null
		}
		this.refs.gifvSource.getDOMNode().onerror = function(err){
			//console.log('ERROR', this.props, err);
		};
	},

	componentDidUnmount : function(){
		clearTimeout(this.timeout);
	},


	canPlayVideo : function(){
		console.log('CAN PLAY', this.props.gif.imgLink);
	},



	renderVideoElement : function(){

/*
		if(this.state.hovered){
			var gif = this.props.gif

			//var width = gif.width, height = gif.height;

			if(gif.width > gif.height && gif.width > 300){
				height =  gif.height/gif.width *300
			}
			if(gif.width < gif.height && gif.height > 300){
				width =  gif.width/gif.height *300

			}




			return <video className='gif' autoPlay loop muted ref='gifv'
				style={{width : width, height : height}}>
						<source type="video/webm" ref='gifvSource'/>
				</video>

		}

*/

		return <video className='gif' autoPlay loop muted ref='gifv' >
					<source type="video/webm" ref='gifvSource'/>
			</video>

	},


	render : function(){
		var self = this;
		var gifv, favourite;

		/*
		if(this.state.hovered){
			gifv = <video className='gif' autoPlay loop muted onCanPlay={this.canPlayVideo}>
				<source src={this.props.gif.webmLink} type="video/webm" />
			</video>
		}
		*/


		var heartButton;
		/*
		if(_.contains(this.props.gif.favouritedBy, 'Scott')){
			favourite = <i className='fa fa-heart favourite' />
			heartButton = <div className='unfavButton'>
				<i className='fa fa-heart-o' />
			</div>
		}else{
			heartButton = <div className='favButton'>
				<i className='fa fa-heart' />
			</div>
		}
		*/
		return(
			<div className={cx('gifCard', {'hovered' : this.state.hovered})}>
				<img className="static" src={this.props.gif.imgLink} />
				{gifv}

				{this.renderVideoElement()}

				<div className='hitbox' onMouseMove={this.hover} onMouseOut={this.unhover} ref='hitbox'>
					<div className='controls'>
						<ClipboardButton
							className='gifButton'
							icon='fa-link'
							tooltip='gif'
							tooltipDone='copied!'
							link={this.props.gif.gifLink} />

						<ClipboardButton
							className='gifvButton'
							link={this.props.gif.gifvLink}
							tooltip='gifv'
							tooltipDone='hq copied!'
							icon='fa-rocket' />


						<Link href={'/edit/' + this.props.gif.id} className='editButton'>
							<i className='fa fa-pencil-square-o' />
						</Link>
						{heartButton}
					</div>
				</div>
				<div className='info'>
					{favourite}
					<div className='views'>
						{Number(this.props.gif.views).toLocaleString('en')}
					</div>
				</div>

			</div>
		);
	}
});

module.exports = GifCard;