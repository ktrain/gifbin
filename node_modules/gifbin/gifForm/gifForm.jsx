/** @jsx React.DOM */
var React = require('react');
var _ = require('underscore');
var cx = require('classnames');


var ClipboardButton = require('gifbin/clipboardButton/clipboardButton.jsx');
var BucketSelect = require('gifbin/bucketSelect/bucketSelect.jsx');

var GifActions = require('gifbin/gif.actions.js');
var GifStore = require('gifbin/gif.store.js');

var randomBucketImg = _.sample(GifStore.getBuckets()).img;

var GifForm = React.createClass({
	mixins : [GifStore.mixin()],
	onStoreChange  : function(){
		this.setState({
			gif: this.state.gif,
			loggedinUser : GifStore.getUser()
		});
	},


	getDefaultProps: function() {
		return {
			placeholder : _.sample([
				"tacos",
				"thumbs up",
				"you got to be kidding me",
				"Micheal Cera",
				"Cereal flip",
				"adventure time",
				"not a sloth lolz",
				"Feeling It",
				"umad",
				"you're god damn right",
				"oh no he didn't"
				], _.random(3,5)).join(', ')
		};
	},

	getInitialState: function() {
		if(this.props.gif){
			return {
				gif : JSON.parse(JSON.stringify(this.props.gif))
			}
		}
		return {
			gif:{
				link: this.convertLinkToGif(this.props.queryLink),
				user : GifStore.getUser(),
				tags : "",
				buckets : []
			}
		};
	},


	convertLinkToGif : function(linkPath){
		return (linkPath || "").replace('.webm', '.gif').replace('.gifv', '.gif')
	},

	deleteGif : function(){

	},

	//Maybe move into the button renderer
	isValid : function(){
		if(_.isEqual(this.state.gif, this.props.gif)){
			return false;
		}

		var gif = this.state.gif;
		return !!(gif.link &&
			gif.user &&
			(gif.tags || gif.buckets.length));
	},


	handleLoginClick : function(){
		GifActions.login()
	},

	handleLinkChange : function(e){
		this.state.gif.link = this.convertLinkToGif(e.target.value);
		this.setState({
			gif : this.state.gif
		});
	},

	handleTagChange : function(e){
		this.state.gif.tags = e.target.value
		this.setState({
			gif : this.state.gif
		});
	},

	handleBucketChange : function(buckets){
		this.state.gif.buckets = buckets;
		this.setState({
			gif : this.state.gif
		});
	},

	handleSave : function(){
		GifActions.saveGif(this.state.gif, function(res){
			window.location = '/edit/' + res.body.id;
		})
	},
	handleDelete : function(){
		GifActions.deleteGif(this.state.gif.id, function(res){
			window.location = '/';
		})
	},


	renderLink : function(){
		if(this.state.gif.id){
			return [
				<div className='link'>{this.state.gif.link}</div>,
				<ClipboardButton link={this.state.gif.link}/>
			];
		}else{
			return <input className='link' type='text' value={this.state.gif.link} onChange={this.handleLinkChange} />
		}
	},

	renderUser : function(){

		if(this.state.gif.id){
			return [
				<label>by</label>,
				<div className='userName'>
					<a href={'/users/' + this.state.gif.user} target="_blank">
						{this.state.gif.user}
						<i className='fa fa-external-link' />
					</a>
				</div>
			];
		}

		if (this.state.loggedinUser){
			return [
				<label>user</label>,
				<div className='userName'>
					<a href={'/users/' + this.state.loggedinUser} target="_blank">
						{this.state.loggedinUser}
						<i className='fa fa-external-link' />
					</a>
				</div>
			];
		}else{
			return [
				<label>user</label>,
				<button className='login' onClick={this.handleLoginClick}>
					<i className='fa fa-sign-in' /> login
				</button>
			]
		}
	},


	renderViews : function(){
		if(!this.state.gif.id) return false;

		return (
			<div className='views formItem'>
				<label>views</label>
				<div>{this.state.gif.views}</div>
			</div>
		);

	},

	renderCreated : function(){
		if(!this.state.gif.id) return false;

		return (
			<div className='views formItem'>
				<label>created</label>
				<div>Finish this</div>
			</div>
		);

	},

	renderDeleteButton : function(){
		if(!this.state.gif.id) return false;

		return (
			<div className='deleteButton' onClick={this.handleDelete} data-tooltip-right='Delete this gif'>
				<i className='fa fa-trash' />
			</div>
		)
	},


	renderSaveButton : function(){
		if(!this.state.gif.id){
			return <button
						className='save'
						disabled={!this.isValid()}
						onClick={this.handleSave}> <i className='fa fa-save' /> save</button>
		}else{
			return <button
						className='update'
						disabled={!this.isValid()}
						onClick={this.handleSave}> <i className='fa fa-wrench' /> update</button>
		}
	},



	render : function(){
		var self = this;

		var gif = this.state.gif;

		console.log(gif);


		var imageContainer = <div className='imageContainer filler' style={{backgroundImage : "url('" + randomBucketImg + "')" }}  />
		if(gif.link){
			imageContainer = <div className='imageContainer' style={{backgroundImage : "url('" + gif.link + "')" }} />
		}


		return(
			<div className='gifForm'>
				<div className='imageSide '>
					{imageContainer}
				</div>

				<div className='dataSide'>
					<div className='link formItem'>
						<label>link</label>
						{this.renderLink()}
					</div>

					<div className='bucket formItem'>
						<label>bucket</label>
						<BucketSelect selectedBuckets={gif.buckets} onChange={this.handleBucketChange} />
					</div>

					<div className='tags formItem'>
						<label>tags</label>
						<textarea
							className='tags'
							value={gif.tags}
							placeholder={this.props.placeholder}
							onChange={this.handleTagChange} />
					</div>

					{this.renderViews()}
					{this.renderCreated()}

					<div className='formItem user'>
						{this.renderUser()}
					</div>

					{this.renderSaveButton()}

					{this.renderDeleteButton()}

				</div>
			</div>
		);
	}
});

module.exports = GifForm;


