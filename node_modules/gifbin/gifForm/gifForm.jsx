/** @jsx React.DOM */
var React = require('react');
var _ = require('underscore');
var cx = require('classnames');

var ClipboardButton = require('gifbin/clipboardButton/clipboardButton.jsx');

var request = require('superagent');

var BucketSelect = require('gifbin/bucketSelect/bucketSelect.jsx');

var GifForm = React.createClass({


	getDefaultProps: function() {
		return {
			placeholder : _.sample([
				"tacos",
				"thumbs up",
				"you got to be kidding me",
				"Micheal Cera",
				"Cereal flip",
				"adventure time",
				"not a sloth lolz",
				"Feeling It",
				"umad",
				"you're god damn right",
				"oh no he didn't"
				], _.random(3,5)).join(', ')
		};
	},

	getInitialState: function() {

		console.log(this.props.queryLink);
		console.log(this.convertLinkToGif(this.props.queryLink));

		if(this.props.gif){
			return {
				gif : JSON.parse(JSON.stringify(this.props.gif))
			}
		}
		return {
			gif:{
				link: this.convertLinkToGif(this.props.queryLink),
				user : 'Scott',
				tags : "",
				buckets : []
			}
		};
	},


	convertLinkToGif : function(linkPath){
		return (linkPath || "").replace('.webm', '.gif').replace('.gifv', '.gif')
	},

	//Maybe move into the butotn renderer
	isValid : function(){
		if(_.isEqual(this.state.gif, this.props.gif)){
			return false;
		}

		var gif = this.state.gif;
		return !!(gif.link &&
			gif.user &&
			(gif.tags || gif.buckets.length));
	},

	handleLinkChange : function(e){

		this.state.gif.link = this.convertLinkToGif(e.target.value);
		this.setState({
			gif : this.state.gif
		});
	},

	handleTagChange : function(e){
		this.state.gif.tags = e.target.value
		this.setState({
			gif : this.state.gif
		});
	},

	handleBucketChange : function(buckets){
		this.state.gif.buckets = buckets;
		this.setState({
			gif : this.state.gif
		});
	},


	handleSave : function(){
		request
			.post('/api/gifs')
			.send(this.state.gif)
			.set('Accept', 'application/json')
			.end(function(err, res){
				console.log(err, res);
				window.location = '/edit/' + res.body.id;
			})
	},

	renderLink : function(){
		if(this.state.gif.id){
			return [
				<div className='link'>{this.state.gif.link}</div>,
				<ClipboardButton link={this.state.gif.link}/>
			];
		}else{
			return <input className='link' type='text' value={this.state.gif.link} onChange={this.handleLinkChange} />
		}
	},

	renderUser : function(){
		if(this.state.gif.id){
			return <div className=''>Uploaded By : {this.state.gif.user}</div>
		}else{

		}
	},



	renderButton : function(){
		if(!this.state.gif.id){
			return <button
						className='save'
						disabled={!this.isValid()}
						onClick={this.handleSave}> <i className='fa fa-save' /> save</button>
		}else{
			return <button
						className='update'
						disabled={!this.isValid()}
						onClick={this.handleSave}> <i className='fa fa-wrench' /> update</button>
		}
	},



	render : function(){
		var self = this;

		var gif = this.state.gif;


		var imageContainer = <div className='imageContainer filler' />
		if(gif.link){
			imageContainer = <div className='imageContainer' style={{backgroundImage : "url('" + gif.link + "')" }} />
		}


		return(
			<div className='gifForm'>
				<div className='imageSide '>
					{imageContainer}
				</div>

				<div className='dataSide'>
					<div className='formItem'>
						<label>Link</label>
						{this.renderLink()}
					</div>

					<div className='formItem'>
						<label>Bucket</label>
						<BucketSelect selectedBuckets={gif.buckets} onChange={this.handleBucketChange} />
					</div>

					<div className='formItem'>
						<label>Tags</label>
						<textarea
							className='tags'
							value={gif.tags}
							placeholder={this.props.placeholder}
							onChange={this.handleTagChange} />
					</div>

					<div className='formItem'>
						<label>User</label>
						<button className='login' onClick={this.login}>
							<i className='fa fa-sign-in' /> login
						</button>
						{this.renderUser()}
					</div>

					{this.renderButton()}

				</div>
			</div>
		);
	}
});

module.exports = GifForm;


